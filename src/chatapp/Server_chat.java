/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapp;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

/**
 *
 * @author habiba
 */
public class Server_chat extends javax.swing.JFrame {

    /**
     * Creates new form Server_chat
     */
      static ServerSocket serverSocket;  //ss
      static Socket clientSocket;  //s
      static DataInputStream din;
      static DataOutputStream dout;
      static PrintWriter out;
      static BufferedReader br;
      static String msg_output="";  
    public Server_chat() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
  
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        msg_txt = new javax.swing.JTextField();
        msg_send = new javax.swing.JButton();
        ServerMessenger = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        msg_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_txtActionPerformed(evt);
            }
        });

        msg_send.setText("Send");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        ServerMessenger.setForeground(new java.awt.Color(1, 9, 6));
        ServerMessenger.setText("   Server Messenger");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(msg_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(msg_send)))
                    .addComponent(ServerMessenger, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(ServerMessenger, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msg_send, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void msg_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_msg_txtActionPerformed

    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_sendActionPerformed
        // TODO add your handling code here:
      //  String msg_output="";
       try{ 
           //String msg_output="";
        msg_output = msg_txt.getText().trim();
        dout.writeUTF(msg_output); //sending the server message to the client
    }//GEN-LAST:event_msg_sendActionPerformed
   catch(Exception e){
       
   }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException{
       /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server_chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server_chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server_chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server_chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
          java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server_chat().setVisible(true);
            }
        });
        String msg_input = ""; 
        try{
            serverSocket = new ServerSocket(5432);//server connect to this port.
            clientSocket = serverSocket.accept(); //for server to accept connection.
            din = new DataInputStream(clientSocket.getInputStream()); // read client message.
            dout = new DataOutputStream(clientSocket.getOutputStream());
            while(!msg_input.equals("exit")) //sever will close when the use enter exit.
        {
                msg_input = din.readUTF();
                msg_area.setText(msg_area.getText()+"\n Client :\t"+msg_input);//display the message from client
            }
            clientSocket.close();
        }catch(Exception e){
            
        }
     /*  String msg_input = ""; 
        try{
            serverSocket = new ServerSocket(8732);//server connect to this port.
            clientSocket = serverSocket.accept(); //for server to accept connection.
            din = new DataInputStream(clientSocket.getInputStream()); // read client message.
            dout = new DataOutputStream(clientSocket.getOutputStream());
            while(!msg_input.equals("exit")) //sever will close when the use enter exit.
              {
                msg_input = din.readUTF();
              /* System.out.println(msg_input); //printing client msg.
                msg_output = br.readLine();
               dout.writeUTF(msg_input);
                dout.flush();
                msg_area.setText(msg_area.getText()+"\n Client : "+msg_input);//display the message from client
            }
           clientSocket.close();
        }catch(Exception e){
            //handle exception
        } 
       
       /* int portNumber = 5432 ;
        String serverIP = "localhost";
        try{
             serverSocket = new ServerSocket(portNumber);
           System.out.println(" Server Started at portnumber : "+portNumber);
           Socket clientSocket = serverSocket.accept();
           System.out.println("Got Connection from "+clientSocket.getInetAddress()+" port number : "+clientSocket.getPort());//this will give ip adress of client//accept the connection from server socket.
        out = new PrintWriter(clientSocket.getOutputStream(),true);//get output from client on server screen.
        BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()) );//to read what ever client is gven.
        String msg_input;
        while((msg_input = in.readLine())!= null){
            System.out.println("Got message "+msg_input+" from "+clientSocket.toString());
            out.println(msg_input);
        }
        }catch(Exception e){
        System.out.println("Exception caught when trying to listen on port"+portNumber+" Or listening from a function");
        System.out.println(e.getMessage());
        }*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ServerMessenger;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msg_area;
    private javax.swing.JButton msg_send;
    private javax.swing.JTextField msg_txt;
    // End of variables declaration//GEN-END:variables
}
